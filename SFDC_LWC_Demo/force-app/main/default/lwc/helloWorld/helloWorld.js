import { LightningElement } from 'lwc';

export default class HelloWorld extends LightningElement {
  greeting = 'World';
  changeHandler(event) {
    this.greeting = event.target.value;
  }
}

// LWCのライフサイクル
// https://qiita.com/kakakaori830/items/69cdf2ac9d1ed7e1ca5f


// 対象者について: SALESFORCE 認定 PLATFORM デベロッパー 

// Salesforce 認定 Platform デベロッパー試験は、Lightning プラットフォームのプログラミング機能を使用した基本的なビジネスロジックおよびユーザインターフェースの開発とリリースの経験があり、その一環として後述の試験範囲に示すスキルや概念の実践的な応用をしたことのある個人を対象としています。 

// Salesforce 認定 Platform デベロッパーには通常、開発者として 1 ～ 2 年の経験と Lightning プラットフォームに関する 6 か月以上の経験があり、時間を取ってこの受験ガイドに記載されている参考資料を学習していることが求められます。 

// Salesforce 認定 Platform デベロッパーの受験者には、以下の経験、スキル、知識が必要です。

// * データ駆動型アプリケーションとリレーショナルデータベースに関する経験がある。 
// * Apex、Java、JavaScript、C#、Ruby など、オブジェクト指向言語に関する経験がある。 
// * ガバナ制限とその影響を熟知している。
// * モデルビューコントローラ (MVC) アーキテクチャと Lightning コンポーネントフレームワークに関する経験がある。
// * Salesforce スキーマのコアオブジェクトの機能に関する知識がある。 
// * 数式項目と積み上げ集計項目の機能とユースケースに関する知識がある。
// * ビジネス要件に応じて宣言型方式とプログラミング方式をどのように使い分けるべきかを理解している。 
// * プラットフォームの関連する宣言型機能に精通し、必要に応じて活用できる。 
// * Lightning プロセスビルダーと Apex トリガのどのように使い分けるべきかを理解し ている。 
// * プログラミング言語 Apex を熟知し、Apex のベストプラクティスを用いてSalesforce のカスタマイズができる。
// * Apex、Visualforce、基本的な Lightning コンポーネントを使用して Lightning プラットフォームを拡張できる。 
// * Lightning プラットフォームの基本的なプログラミング機能を使用して、Salesforce 機能を拡張するカスタムインターフェースの開発や、カスタムビジネスロジックの開発ができる。 
// * 開発からテストまで開発ライフサイクルに精通し、利用できる環境に関する知識がある。 
// * この試験の受験者には、標準の Salesforce アプリケーションの管理、モバイルアプリケーションの開発、管理製品の開発と AppExchange への公開、調整の実行、コールアウト、API、メールサービスなどのインテグレーションの設計に関する知識は問われません。 


// 試験概要

// Salesforce 認定 Platform デベロッパー試験では、次の目的に関する受験者の知識とスキルを評価します。受験者には、Lightning プラットフォームでのカスタムアプリケーション開発の実務経験と、以下に示す各機能の実用的な知識が求められます。 

// デベロッパーの基本: 23%

// * MVC アーキテクチャや Lightning Component フレームワークなど、マルチテナント開発で開発する場合の考慮事項を理解している。 
// * シナリオに基づき、ガバナ制限、数式項目、積み上げ集計項目など、宣言型カスタマイズとプログラム型カスタマイズの一般的なユースケースとベストプラクティスを識別する。
// * シナリオに基づき、オブジェクト、項目、リレーションシップ、外部 ID を含む適切なデータモデルを決定し、作成し、アクセスすることができる。
// * シナリオに基づき、開発環境にデータをインポートおよびエクスポートする際のオプションと注意事項を説明する。

// プロセスの自動化とロジック: 30%

// * 宣言型のプロセス自動化機能を説明する。 
// * Apex で変数、定数、メソッドを宣言し、修飾子とインターフェースを使用する。 
// * シナリオに基づき、Apex のフロー制御ステートメントを使用して適用する。 
// * シナリオに基づき、Apex で SOSL、SOQL、および DML ステートメントを記述する。 
// * シナリオに基づき、ベストプラクティスに従って Apex クラスとトリガを記述する。 
// * シナリオに基づき、Apex トランザクションに対するガバナ制限の影響を識別する。 
// * Apex トランザクション間の関係、保存の実行順序、再帰/カスケードの可能性を説明する。 
// * 必要に応じて、Apex で例外処理 (カスタム例外を含む) を実装する。 
// * シナリオに基づき、宣言型機能と Apex を併用してビジネスロジックを自動化する。  

// ユーザインターフェース: 25%

// * シナリオに基づき、必要に応じて Visualforce ページと適切なコントローラまたは拡張機能を使用して Salesforce データを表示または変更する。 
// * Lightning コンポーネントフレームワークとその利点と、Lightning Web コンポーネントに含めることができるコンテンツの種別を説明する。 
// * シナリオに基づき、ユーザインターフェースとデータアクセスのセキュリティの脆弱性を防止する。
// * シナリオに基づき、Lightning コンポーネント、ビジュアルフロー、Visualforce などのカスタムユーザインターフェースコンポーネントを表示および使用する。 
// * Lightning Web コンポーネントのイベントのユースケースとベストプラクティスを説明する。 
// * ページコンポーネント (Lightning コンポーネント、ビジュアルフロー、Next Best Action など) 間のやりとりを説明する。 

// テスト、デバッグ、リリース: 22%

// * さまざまなテストデータソースを使用するトリガ、コントローラ、フロー、プロセスのテストを記述して実行する。 
// * Salesforce の開発者ツール (Salesforce DX、Salesforce CLI、開発者コンソール など) とそれらを使用すべき場合を説明する 
// * システムの問題のデバッグ方法と、フロー、プロセス、非同期ジョブ、一括処理ジョブなどの監視方法を説明する。 
// * コードと関連する設定をリリースするための環境、要件、プロセスを説明する。

